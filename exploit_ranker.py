import os
from dataclasses import dataclass
from typing import Dict, Iterable
import requests

GITHUB_TOKEN = os.environ.get("GITHUB_TOKEN", "")
if not GITHUB_TOKEN:
    print("[WARNING] GITHUB_TOKEN environment variable not set. GitHub API requests may be rate-limited.")

HEADERS = {
    "Authorization": f"Bearer {GITHUB_TOKEN}" if GITHUB_TOKEN else None,
    "Accept": "application/vnd.github+json"
}

@dataclass
class ExploitInfo:
    """Data class representing exploit information from GitHub."""
    url: str
    stars: int = 0
    forks: int = 0

def rank_exploits(urls: Iterable[str]) -> Dict[str, ExploitInfo]:
    """
    Rank exploits by fetching GitHub stars and forks for each exploit URL.
    Args:
        urls (iterable): Iterable of GitHub repository URLs.
    Returns:
        dict: Mapping from URL to ExploitInfo with stars and forks.
    """
    result: Dict[str, ExploitInfo] = {}
    for url in urls:
        try:
            if "github.com" in url:
                parts = url.split("github.com/")[-1].split("/")
                if len(parts) >= 2:
                    owner, repo = parts[0], parts[1]
                    api_url = f"https://api.github.com/repos/{owner}/{repo}"
                    r = requests.get(api_url, headers=HEADERS, timeout=10)
                    if r.ok:
                        data = r.json()
                        result[url] = ExploitInfo(
                            url,
                            stars=data.get("stargazers_count", 0),
                            forks=data.get("forks_count", 0),
                        )
                    else:
                        result[url] = ExploitInfo(url)
        except requests.RequestException as e:
            print(f"[ERROR] Failed to fetch GitHub repo info for {url}: {e}")
            result[url] = ExploitInfo(url)
        except Exception as e:
            print(f"[ERROR] Unexpected error during exploit ranking for {url}: {e}")
            result[url] = ExploitInfo(url)
    return result
